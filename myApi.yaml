openapi: 3.1.0
info:
  title: myApi
  version: '1.0'
  summary: buying and selling platform
  description: 'users can post, buy and sell products'
  contact:
    name: Adam Moen
    email: AdamJMoen@gmail.com
servers:
  - url: 'http://localhost:3000'
paths:
  '/user/{ID}':
    parameters:
      - schema:
          type: string
        name: ID
        in: path
        required: true
        description: unique indentifier for user
    get:
      summary: Get user info
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: get-user-ID
      security:
        - HTTP-basic: []
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '201':
          description: Created
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  ID:
                    type: number
                    description: |
                      unique identification number for new user
              examples:
                ID example:
                  value:
                    ID: 920482
        '400':
          description: Missing Required Information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorHandling'
              examples:
                example-1:
                  value:
                    error: there are fields in which information is missing
        '409':
          description: Email Already Taken
          content:
            application/json:
              schema:
                type: object
                properties:
                  emailError:
                    type: string
              examples:
                example-1:
                  value:
                    emailError: Email has already been registered
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: first name of user
                lastName:
                  type: string
                  description: last name of user
                userName:
                  type: string
                email:
                  type: string
                  format: email
                dateOfBirth:
                  type: string
                  format: date
                password:
                  type: string
                  format: password
              required:
                - firstName
                - lastName
                - userName
                - email
                - dateOfBirth
                - password
            examples:
              User Adam Moen:
                value:
                  firstName: Adam
                  lastName: Moen
                  userName: ajm999
                  email: k1moad00@students.oamk.fi
                  dateOfBirth: '2000-08-01'
                  password: laptop321$
                  address:
                    street: 123 Rainbow Road
                    postCode: '90672'
                    city: Oulu
                    country: FI
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
    parameters: []
  /postings:
    get:
      summary: Getting all postings
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Postings'
      operationId: get-postings
    post:
      summary: Creating a new posting
      operationId: post-postings
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  postingID:
                    type: integer
              examples:
                example-1:
                  value:
                    postingID: 12345
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorHandling'
        '401':
          description: Unauthorized
      description: Create a new posting
      security:
        - HTTP-basic: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Postings'
  '/postings/{postingID}':
    parameters:
      - schema:
          type: string
        name: postingID
        in: path
        required: true
    get:
      summary: Getting the info on a specific posting
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Postings'
        '404':
          description: Not Found
      operationId: get-postings-postingID
      description: Getting the info on a specific posting
    delete:
      summary: Deleting a specific posting
      operationId: delete-postings-postingID
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorHandling'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorHandling'
    put:
      summary: Modifying a specific post
      operationId: put-postings-postingID
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorHandling'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorHandling'
      description: Modifying a specific post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Postings'
      security:
        - HTTP-basic: []
  /postings/search:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Postings'
      operationId: get-postings-search
      parameters:
        - schema:
            type: string
          in: query
          name: category
        - schema:
            type: string
          in: query
          name: location
        - schema:
            type: string
          in: query
          name: dateOfPost
  /login:
    post:
      summary: loggin user in
      operationId: post-login
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      description: logging user in with username and password
      security:
        - HTTP-basic: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                password:
                  type: string
components:
  schemas:
    UserInfo:
      title: UserInfo
      type: object
      description: ''
      properties:
        ID:
          type: number
        userName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        dateOfBirth:
          type: string
        email:
          type: string
      examples:
        - ID: 90182
          userName: string
          firstName: string
          lastName: string
          dateOfBirth: string
          email: string
    ErrorHandling:
      title: ErrorHandling
      type: object
      properties:
        error:
          type: string
    Postings:
      title: Postings
      type: object
      examples:
        - postingID: 12345
          title: Bike
          description: Slighty Used Bike for Sale
          category: Outdoor Equipment
          location:
            street: 123 Rainbow Road
            city: Oulu
            postCode: '90679'
            country: FI
          images: '*string of bytes**'
          askPrice: $50
          dateOfPost: '2021-09-28'
          deliveryType: Shipping
          sellerID: 90182
      description: ''
      properties:
        ID:
          type: integer
        title:
          type: string
        description:
          type: string
        category:
          type: string
        location:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            postCode:
              type: string
            country:
              type: string
        images:
          type: string
        askPrice:
          type: string
        dateOfPost:
          type: string
        deliveryType:
          type: string
        sellerID:
          type: number
  securitySchemes:
    HTTP-basic:
      type: http
      scheme: basic
